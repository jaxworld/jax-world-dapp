"use strict";(self.webpackChunkjaxworld_dapp=self.webpackChunkjaxworld_dapp||[]).push([[8127],{28127:(t,e,n)=>{n.d(e,{OneKeyConnector:()=>d});var i=n(40744),s=n(84714),c=n(36236),o=n(85372),a=n(28552),h=n(45367),r=(n(62349),n(78466));class d extends o.InjectedConnector{constructor(t){const e={...{name:"OneKey Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:h.g},...t.options};super({chains:t.chains,options:e,connectorStorage:t.connectorStorage}),(0,i._)(this,"id",c.w.oneKey)}async connect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,n;const o=await this.getProvider();if(!o)throw new s.a;this.setupListeners(),this.emit("message",{type:"connecting"});let h=null;if(null!==(e=this.options)&&void 0!==e&&e.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))){h=await this.getAccount().catch((()=>null));if(!!h)try{await o.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(i){if(this.isUserRejectedRequestError(i))throw new s.U(i)}}if(!h){const t=await o.request({method:"eth_requestAccounts"});h=a.getAddress(t[0])}let d=await this.getChainId(),u=this.isChainUnsupported(d);if(t.chainId&&d!==t.chainId)try{await this.switchChain(t.chainId),d=t.chainId,u=this.isChainUnsupported(t.chainId)}catch(c){r.error("Could not switch to chain id : ".concat(t.chainId),c)}null!==(n=this.options)&&void 0!==n&&n.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const w={chain:{id:d,unsupported:u},provider:o,account:h};return this.emit("connect",w),w}catch(i){if(this.isUserRejectedRequestError(i))throw new s.U(i);if(-32002===i.code)throw new s.R(i);throw i}}}}}]);