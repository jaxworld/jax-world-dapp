"use strict";(self.webpackChunkjaxworld_dapp=self.webpackChunkjaxworld_dapp||[]).push([[8895],{8895:(t,e,s)=>{s.d(e,{MetaMaskConnector:()=>w});var i=s(95768),n=s(40744),c=s(84714),o=s(36236),a=s(85372),h=s(28552),r=s(16240),d=(s(62349),s(78466)),u=new WeakMap;class w extends a.InjectedConnector{constructor(t){const e={...{name:"MetaMask",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:r.g},...t.options};super({chains:t.chains,options:e,connectorStorage:t.connectorStorage}),(0,n._)(this,"id",o.w.metamask),(0,i._)(this,u,{writable:!0,value:void 0}),(0,i.a)(this,u,e.UNSTABLE_shimOnConnectSelectAccount)}async connect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,s;const a=await this.getProvider();if(!a)throw new c.a;this.setupListeners(),this.emit("message",{type:"connecting"});let r=null;if((0,i.b)(this,u)&&null!==(e=this.options)&&void 0!==e&&e.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))){r=await this.getAccount().catch((()=>null));if(!!r)try{await a.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n)}}if(!r){const t=await a.request({method:"eth_requestAccounts"});r=h.getAddress(t[0])}let w=await this.getChainId(),l=this.isChainUnsupported(w);if(t.chainId&&w!==t.chainId)try{await this.switchChain(t.chainId),w=t.chainId,l=this.isChainUnsupported(t.chainId)}catch(o){d.error("Could not switch to chain id : ".concat(t.chainId),o)}null!==(s=this.options)&&void 0!==s&&s.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const p={chain:{id:w,unsupported:l},provider:a,account:r};return this.emit("connect",p),p}catch(n){if(this.isUserRejectedRequestError(n))throw new c.U(n);if(-32002===n.code)throw new c.R(n);throw n}}async switchAccount(){const t=await this.getProvider();await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}}}]);