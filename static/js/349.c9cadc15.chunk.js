"use strict";(self.webpackChunkjaxworld_dapp=self.webpackChunkjaxworld_dapp||[]).push([[349],{6889:(t,e,s)=>{s.d(e,{W:()=>o});var i=s(40744),n=s(89920),a=s(62349);class o extends a.Z{constructor(t){let{chains:e=n.gL9,options:s}=t;super(),(0,i._)(this,"id",void 0),(0,i._)(this,"name",void 0),(0,i._)(this,"chains",void 0),(0,i._)(this,"options",void 0),(0,i._)(this,"ready",void 0),this.chains=e,this.options=s}getBlockExplorerUrls(t){var e,s;const i=null!==(e=null===(s=t.explorers)||void 0===s?void 0:s.map((t=>t.url)))&&void 0!==e?e:[];return i.length>0?i:void 0}isChainUnsupported(t){return!this.chains.some((e=>e.chainId===t))}updateChains(t){this.chains=t}}},83458:(t,e,s)=>{s.d(e,{A:()=>o,C:()=>r,R:()=>h,S:()=>d,U:()=>u,a:()=>c});var i=s(40744);class n extends Error{constructor(t,e){const{cause:s,code:n,data:a}=e;if(!Number.isInteger(n))throw new Error('"code" must be an integer.');if(!t||"string"!==typeof t)throw new Error('"message" must be a nonempty string.');super(t),(0,i._)(this,"cause",void 0),(0,i._)(this,"code",void 0),(0,i._)(this,"data",void 0),this.cause=s,this.code=n,this.data=a}}class a extends n{constructor(t,e){const{cause:s,code:i,data:n}=e;if(!(Number.isInteger(i)&&i>=1e3&&i<=4999))throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');super(t,{cause:s,code:i,data:n})}}class o extends Error{constructor(){super(...arguments),(0,i._)(this,"name","AddChainError"),(0,i._)(this,"message","Error adding chain")}}class r extends Error{constructor(t){let{chainId:e,connectorId:s}=t;super('Chain "'.concat(e,'" not configured for connector "').concat(s,'".')),(0,i._)(this,"name","ChainNotConfigured")}}class c extends Error{constructor(){super(...arguments),(0,i._)(this,"name","ConnectorNotFoundError"),(0,i._)(this,"message","Connector not found")}}class h extends n{constructor(t){super("Resource unavailable",{cause:t,code:-32002}),(0,i._)(this,"name","ResourceUnavailable")}}class d extends a{constructor(t){super("Error switching chain",{cause:t,code:4902}),(0,i._)(this,"name","SwitchChainError")}}class u extends a{constructor(t){super("User rejected request",{cause:t,code:4001}),(0,i._)(this,"name","UserRejectedRequestError")}}},93207:(t,e,s)=>{function i(t){return"string"===typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"===typeof t?Number(t):t}s.d(e,{n:()=>i})},10349:(t,e,s)=>{s.d(e,{WalletConnectV1Connector:()=>_});var i=s(46039),n=s(95768),a=s(40744),o=s(15920),r=s(28552),c=s(64249),h=s(52009),d=s(6889),u=s(93207),l=s(83458);s(62349);const m="last-used-chain-id",p="last-session";var g=new WeakMap,v=new WeakMap,w=new WeakSet,C=new WeakSet;class _ extends d.W{constructor(t){super(t),(0,i._)(this,C),(0,i._)(this,w),(0,a._)(this,"id",o.w.walletConnectV1),(0,a._)(this,"name","WalletConnectV1"),(0,a._)(this,"ready",!0),(0,n._)(this,g,{writable:!0,value:void 0}),(0,n._)(this,v,{writable:!0,value:void 0}),(0,a._)(this,"walletName",void 0),(0,a._)(this,"onSwitchChain",(()=>{this.emit("message",{type:"switch_chain"})})),(0,a._)(this,"onDisplayUri",(async(t,e)=>{t&&this.emit("message",{data:t,type:"display_uri_error"}),this.emit("message",{data:e.params[0],type:"display_uri"})})),(0,a._)(this,"onRequestSent",((t,e)=>{t&&this.emit("message",{data:t,type:"request"}),this.emit("message",{data:e.params[0],type:"request"})})),(0,a._)(this,"onMessage",(t=>{this.emit("message",t)})),(0,a._)(this,"onAccountsChanged",(t=>{0===t.length?this.emit("disconnect"):this.emit("change",{account:r.getAddress(t[0])})})),(0,a._)(this,"onChainChanged",(t=>{const e=(0,u.n)(t),s=this.isChainUnsupported(e);(0,n.b)(this,v).setItem(m,String(t)),this.emit("change",{chain:{id:e,unsupported:s}})})),(0,a._)(this,"onDisconnect",(async()=>{this.walletName=void 0,(0,n.b)(this,v).removeItem(m),(0,n.b)(this,v).removeItem(p),(0,i.a)(this,C,y).call(this),this.emit("disconnect")})),(0,n.a)(this,v,t.storage)}async connect(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,s,a;let h=t;if(!h){const t=await(0,n.b)(this,v).getItem(m),e=t?parseInt(t):void 0;e&&!this.isChainUnsupported(e)&&(h=e)}const d=await this.getProvider({chainId:h,create:!0});this.setupListeners(),setTimeout((()=>this.emit("message",{type:"connecting"})),0);const u=await d.enable(),l=r.getAddress(u[0]);let p=await this.getChainId(),g=this.isChainUnsupported(p);if(this.walletName=null!==(e=null===(s=d.connector)||void 0===s||null===(a=s.peerMeta)||void 0===a?void 0:a.name)&&void 0!==e?e:"",t)try{await this.switchChain(t),p=t,g=this.isChainUnsupported(p)}catch(o){console.error("could not switch to desired chain id: ".concat(t," "),o)}return(0,i.a)(this,w,b).call(this),this.emit("connect",{account:l,chain:{id:p,unsupported:g},provider:d}),{account:l,chain:{id:p,unsupported:g},provider:new c.Q(d)}}catch(h){if(/user closed modal/i.test(h.message))throw new l.U(h);throw h}}async disconnect(){const t=await this.getProvider();await t.disconnect()}async getAccount(){const t=(await this.getProvider()).accounts;return r.getAddress(t[0])}async getChainId(){const t=await this.getProvider();return(0,u.n)(t.chainId)}async getProvider(){let{chainId:t,create:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!(0,n.b)(this,g)||t||e){var i,a,o;const e=null!==(i=this.options)&&void 0!==i&&i.infuraId?{}:this.chains.reduce(((t,e)=>({...t,[e.chainId]:e.rpc[0]})),{}),r=(await Promise.all([s.e(6316),s.e(7806)]).then(s.bind(s,87806))).default,c=await(0,n.b)(this,v).getItem(p),h=c?JSON.parse(c):void 0;this.walletName=(null===h||void 0===h||null===(a=h.peerMeta)||void 0===a?void 0:a.name)||void 0,(0,n.a)(this,g,new r({...this.options,chainId:t,rpc:{...e,...null===(o=this.options)||void 0===o?void 0:o.rpc},session:h||void 0}))}return(0,n.b)(this,g)}async getSigner(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const[e,s]=await Promise.all([this.getProvider({chainId:t}),this.getAccount()]);return new c.Q(e,t).getSigner(s)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){const e=await this.getProvider(),s=h.hexValue(t);try{var i;return await Promise.race([e.request({method:"wallet_switchEthereumChain",params:[{chainId:s}]}),new Promise((e=>this.on("change",(s=>{let{chain:i}=s;(null===i||void 0===i?void 0:i.id)===t&&e(t)}))))]),null!==(i=this.chains.find((e=>e.chainId===t)))&&void 0!==i?i:{chainId:t,name:"Chain ".concat(s),network:"".concat(s),nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],shortName:"eth",chain:"ETH",slug:"ethereum",testnet:!1}}catch(n){const i="string"===typeof n?n:null===n||void 0===n?void 0:n.message;if(/user rejected request/i.test(i))throw new l.U(n);const a=this.chains.find((e=>e.chainId===t));if(!a)throw new l.S("Chain ".concat(t," is not added in the list of supported chains"));if(/Unrecognized chain ID/i.test(i)){this.emit("message",{type:"add_chain"});const t=this.getBlockExplorerUrls(a);return await e.request({method:"wallet_addEthereumChain",params:[{chainId:s,chainName:a.name,nativeCurrency:a.nativeCurrency,rpcUrls:a.rpc,blockExplorerUrls:t}]}),a}throw new l.S(n)}}async setupListeners(){(0,n.b)(this,g)&&((0,n.b)(this,g).on("accountsChanged",this.onAccountsChanged),(0,n.b)(this,g).on("chainChanged",this.onChainChanged),(0,n.b)(this,g).on("disconnect",this.onDisconnect),(0,n.b)(this,g).on("message",this.onMessage),(0,n.b)(this,g).on("switchChain",this.onSwitchChain),(0,n.b)(this,g).on("display_uri",this.onDisplayUri),(0,n.b)(this,g).on("call_request_sent",this.onRequestSent))}}async function b(){var t,e;const s=null===(t=(0,n.b)(this,g))||void 0===t?void 0:t.connector.session;this.walletName=(null===s||void 0===s||null===(e=s.peerMeta)||void 0===e?void 0:e.name)||"";const i=JSON.stringify(s);(0,n.b)(this,v).setItem(p,i)}function y(){(0,n.b)(this,g)&&((0,n.b)(this,g).removeListener("accountsChanged",this.onAccountsChanged),(0,n.b)(this,g).removeListener("chainChanged",this.onChainChanged),(0,n.b)(this,g).removeListener("disconnect",this.onDisconnect),(0,n.b)(this,g).removeListener("message",this.onMessage),(0,n.b)(this,g).removeListener("switchChain",this.onSwitchChain),(0,n.b)(this,g).removeListener("display_uri",this.onDisplayUri),(0,n.b)(this,g).removeListener("call_request_sent",this.onRequestSent))}}}]);